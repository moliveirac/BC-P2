{"ast":null,"code":"var _jsxFileName = \"/home/miguioli/Aplicaciones/dapp_ipfs/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport './App.css';\nimport { create } from 'kubo-rpc-client';\nimport { ethers } from \"ethers\";\nimport { Buffer } from \"buffer\";\nimport logo from \"./ethereumLogo.png\";\nimport { addresses, abis } from \"./contracts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\nlet client;\nconst defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n// version 6\n//const defaultProvider = new ethers.BrowserProvider(window.ethereum);\n\nconst ipfsContract = new ethers.Contract(addresses.ipfs, abis.ipfs, defaultProvider);\n\n//contract = new ethers.Contract(address, abi, defaultProvider);\n\nasync function readCurrentUserFile() {\n  const result = await ipfsContract.userFiles(defaultProvider.getSigner().getAddress());\n  console.log({\n    result\n  });\n  return result;\n}\nfunction App() {\n  _s();\n  const [ipfsHash, setIpfsHash] = useState(\"\");\n  useEffect(() => {\n    window.ethereum.enable();\n  }, []);\n\n  /*\n  *\n  let abi = JSON.parse('[{\"inputs\": [{\"internalType\": \"string\",\"name\": \"file\",\"type\":\n  \"string\"}],\"name\": \"setFileIPFS\",\"outputs\": [],\"stateMutability\":\n  \"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\":\n  \"\",\"type\": \"address\"}],\"name\": \"userFiles\",\"outputs\": [{\"internalType\":\n  \"string\",\"name\": \"\",\"type\": \"string\"}],\"stateMutability\": \"view\",\"type\":\n  \"function\"}]')\n  let address = \"0x7d2C909F0b4d2fb2993b92CC343A6834585831BF\";\n  *\n  */\n\n  let [connected, setConnected] = useState(false);\n  const [file, setFile] = useState(null);\n  useEffect(() => {\n    async function readFile() {\n      const file = await readCurrentUserFile();\n      if (file !== ZERO_ADDRESS) setIpfsHash(file);\n    }\n    readFile();\n  }, []);\n  async function setFileIPFS(hash) {\n    const ipfsWithSigner = ipfsContract.connect(defaultProvider.getSigner());\n    console.log(\"TX contract\");\n    const tx = await ipfsWithSigner.setFileIPFS(hash);\n    console.log({\n      tx\n    });\n    setIpfsHash(hash);\n  }\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      console.log(file);\n      // conectar a la instancia en local de ipfs\n      const client = await create('/ip4/0.0.0.0/tcp/5001');\n      // añadir le archivo a ipfs\n      const result = await client.add(file);\n      // añadir al fs del nodo ipfs en local para poder visualizarlo en el dashboard\n      await client.files.cp(`/ipfs/${result.cid}`, `/${result.cid}`);\n      console.log(result.cid);\n      // añadir el CID de ipfs a ethereum a traves del smart contract\n      await setFileIPFS(result.cid.toString());\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n  const retrieveFile = e => {\n    const data = e.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n    console.log(data);\n    reader.onloadend = () => {\n      console.log(\"Buffer data: \", Buffer(reader.result));\n      setFile(Buffer(reader.result));\n    };\n    e.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Upload a file to store it on IPFS and save the hash on ethereum.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"form\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"data\",\n          onChange: retrieveFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 4\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn\",\n          children: \"Upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 2\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 13\n  }, this);\n}\n_s(App, \"qFgMfCWEOqn/PetWucf4KMkrgSw=\");\n_c = App;\nexport default App;\n\n//http://0.0.0.0:5001/ipfs/bafybeibozpulxtpv5nhfa2ue3dcjx23ndh3gwr5vwllk7ptoyfwnfjjr4q/#/files\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","create","ethers","Buffer","logo","addresses","abis","jsxDEV","_jsxDEV","ZERO_ADDRESS","client","defaultProvider","providers","Web3Provider","window","ethereum","ipfsContract","Contract","ipfs","readCurrentUserFile","result","userFiles","getSigner","getAddress","console","log","App","_s","ipfsHash","setIpfsHash","enable","connected","setConnected","file","setFile","readFile","setFileIPFS","hash","ipfsWithSigner","connect","tx","handleSubmit","e","preventDefault","add","files","cp","cid","toString","error","message","retrieveFile","data","target","reader","FileReader","readAsArrayBuffer","onloadend","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","name","onChange","_c","$RefreshReg$"],"sources":["/home/miguioli/Aplicaciones/dapp_ipfs/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport './App.css';\nimport { create } from 'kubo-rpc-client'\nimport { ethers } from \"ethers\"\nimport { Buffer } from \"buffer\"\nimport logo from \"./ethereumLogo.png\"\nimport { addresses, abis } from \"./contracts\"\n\nconst ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\nlet client\nconst defaultProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n// version 6\n//const defaultProvider = new ethers.BrowserProvider(window.ethereum);\n\nconst ipfsContract = new ethers.Contract(\naddresses.ipfs,\nabis.ipfs,\ndefaultProvider\n);\n\n//contract = new ethers.Contract(address, abi, defaultProvider);\n\nasync function readCurrentUserFile() {\n    const result = await ipfsContract.userFiles(\n    defaultProvider.getSigner().getAddress()\n    );\n\n    console.log({ result });\n    return result;\n}\n\nfunction App() {\n    const [ipfsHash, setIpfsHash] = useState(\"\");\n    useEffect(() => {\n        window.ethereum.enable();\n    }, []);\n\n/*\n*\nlet abi = JSON.parse('[{\"inputs\": [{\"internalType\": \"string\",\"name\": \"file\",\"type\":\n\"string\"}],\"name\": \"setFileIPFS\",\"outputs\": [],\"stateMutability\":\n\"nonpayable\",\"type\": \"function\"},{\"inputs\": [{\"internalType\": \"address\",\"name\":\n\"\",\"type\": \"address\"}],\"name\": \"userFiles\",\"outputs\": [{\"internalType\":\n\"string\",\"name\": \"\",\"type\": \"string\"}],\"stateMutability\": \"view\",\"type\":\n\"function\"}]')\nlet address = \"0x7d2C909F0b4d2fb2993b92CC343A6834585831BF\";\n*\n*/\n\n    let [connected, setConnected] = useState(false);\n    const [file, setFile] = useState(null);\n    useEffect(() => {\n        async function readFile() {\n            const file = await readCurrentUserFile();\n            if (file !== ZERO_ADDRESS) setIpfsHash(file);\n        }\n        readFile();\n    }, []);\n\n    async function setFileIPFS(hash) {\n        const ipfsWithSigner = ipfsContract.connect(defaultProvider.getSigner());\n        console.log(\"TX contract\");\n        const tx = await ipfsWithSigner.setFileIPFS(hash);\n        console.log({ tx });\n        setIpfsHash(hash);\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            console.log(file)\n            // conectar a la instancia en local de ipfs\n            const client = await create('/ip4/0.0.0.0/tcp/5001')\n            // añadir le archivo a ipfs\n            const result = await client.add(file)\n            // añadir al fs del nodo ipfs en local para poder visualizarlo en el dashboard\n            await client.files.cp(`/ipfs/${result.cid}`, `/${result.cid}`)\n            console.log(result.cid)\n            // añadir el CID de ipfs a ethereum a traves del smart contract\n            await setFileIPFS(result.cid.toString());\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const retrieveFile = (e) => {\n        const data = e.target.files[0];\n        const reader = new window.FileReader();\n        reader.readAsArrayBuffer(data);\n        console.log(data);\n        reader.onloadend = () => {\n            console.log(\"Buffer data: \", Buffer(reader.result));\n            setFile(Buffer(reader.result));\n        }\n        e.preventDefault();\n    }\n\n    return (<div className=\"App\">\n <header className=\"App-header\">\n  <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  <p>\n   Upload a file to store it on IPFS and save the hash on ethereum.\n  </p>\n  <form className=\"form\" onSubmit={handleSubmit}>\n   <input type=\"file\" name=\"data\" onChange={retrieveFile} />\n   <button type=\"submit\" className=\"btn\">Upload</button>\n  </form>\n </header>\n</div>);\n}\n\nexport default App;\n\n//http://0.0.0.0:5001/ipfs/bafybeibozpulxtpv5nhfa2ue3dcjx23ndh3gwr5vwllk7ptoyfwnfjjr4q/#/files\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}